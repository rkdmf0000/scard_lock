name: CMake

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3


    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

#     - name: Build
#      # Build your program with the given configuration
#       run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}


    - name: Build CMake
        # You may pin to the exact commit or the version.
        # uses: ashutoshvarma/action-cmake-build@0fbeeac8b1f9c8aef99e9eae9d78529ed3b0364b
      uses: ashutoshvarma/action-cmake-build@v1
      with:
          build-dir: ${{ runner.workspace }}/build
          # will set the CC & CXX for cmake
          cc: gcc
          cxx: gxx
          build-type: Release
          # Extra options pass to cmake while configuring project
          configure-options: -DCMAKE_C_FLAGS=-w32 -DPNG_INCLUDE=OFF
          #run-test: true
          #ctest-options: -R mytest
          # install the build using cmake --install
          #install-build: true
          # run build using '-j [parallel]' to use multiple threads to build
          parallel: 14




